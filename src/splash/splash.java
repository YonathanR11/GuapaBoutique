/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package splash;

import Principal.conectar;
import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.awt.Image;
import java.sql.Connection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Yonathan
 */
public final class splash extends javax.swing.JFrame implements Runnable{

    private Thread tiempo = null;
//    final String[] texto = {"Cargando componentes...", "Conectando con la base de datos...", "Configurando...",
//                            "Cargando archivos...", "Configurando propiedades...", "Cargando base de datos...","Cargando usuarios...","Preparando sistema...","Abriendo sistema..."};
    final String[] texto = {"Cargando ... ","Cargando ..."};
    int Tiempo = 800;
    
    /**
     * Creates new form splash
     */
    public splash() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/img/imgsplash.jpg")).getImage());
        this.setLocationRelativeTo(null);
        ImageIcon imagen = new ImageIcon(getClass().getResource("/img/imgsplash.jpg"));
        Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(imagesplash.getWidth(), imagesplash.getHeight(), Image.SCALE_DEFAULT));
        imagesplash.setIcon(icono);
        this.repaint();
        ImageIcon imagen1 = new ImageIcon(getClass().getResource("/img/splash1.png"));
        Icon icono1 = new ImageIcon(imagen1.getImage().getScaledInstance(lbimagen1.getWidth(), lbimagen1.getHeight(), Image.SCALE_DEFAULT));
        this.lbimagen1.setIcon(icono1);
        this.repaint();
        ImageIcon imagen2 = new ImageIcon(getClass().getResource("/img/splash2.png"));
        Icon icono2 = new ImageIcon(imagen2.getImage().getScaledInstance(lbimagen2.getWidth(), lbimagen2.getHeight(), Image.SCALE_DEFAULT));
        this.lbimagen2.setIcon(icono2);
        this.repaint();
        AWTUtilities.setWindowOpaque(this, false);
        conex();
        tiempo = new Thread(this);
        tiempo.start();
        
    }
    
    public void conex(){
        conectar cc= new conectar();
        Connection cn=cc.conexion();
        
                if(cn==null){
            //JOptionPane.showMessageDialog(null,"Ocurrio un problema al intentar conectar con la base de datos!");
//            AbrirXampp();
            Tiempo = 4000;
            System.out.println(" ");
            System.out.println("=======================================================");
            System.out.println("      SE ABRIRA EL MANEJADOR DE LA BASE DE DATOS");
            System.out.println("=======================================================");
            boolean verificar = conexion();
            if (verificar) {
                System.out.println("");
                System.out.println("CONEXION ESTABLECIDA CON EXITO.");
                System.out.println("");
            }else{
                System.out.println("");
                System.out.println("ERROR EN LA CONEXION.");
                System.out.println("");
                System.out.println("REINTENTANDO...");
                conex();
            }
        }
    }
    

    public void AbrirXampp(){
        try {
//            Process p = Runtime.getRuntime().exec("C:\\xampp\\xampp-control.exe");  \xampp\xampp_start.exe
              Process p = Runtime.getRuntime().exec("C:\\xampp\\xampp_start.exe");//\xampp\xampp_stop.exe
              Thread.sleep(1000);
        } catch (Exception e) {
            System.out.println("ERROR AL ABRIR XAMPP: "+e);
        }
    }
    
    
    public boolean conexion() {
boolean verifi = false;
        try {
            Thread.sleep(1000);
            conectar cc = new conectar();
            Connection cn = cc.conexion();
            
            if (cn == null) {
                verifi = false;
            } else {
                verifi = true;
            }

        } catch (InterruptedException ex) {
            Logger.getLogger(splash.class.getName()).log(Level.SEVERE, null, ex);
        }
        return verifi;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        imagesplash = new javax.swing.JLabel();
        lbimagen1 = new javax.swing.JLabel();
        lbimagen2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jProgressBar1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jProgressBar1.setForeground(new java.awt.Color(0, 0, 0));
        jProgressBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jPanel1.add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 390, 20));

        imagesplash.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagesplash.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jPanel1.add(imagesplash, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 300));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 410, 300));
        getContentPane().add(lbimagen1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 540));
        getContentPane().add(lbimagen2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(splash.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(splash.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(splash.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(splash.class.getName()).log(Level.SEVERE, null, ex);
                }
                new splash().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imagesplash;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel lbimagen1;
    private javax.swing.JLabel lbimagen2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void run() {
        jProgressBar1.setString("");
        jProgressBar1.setMaximum(texto.length);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setForeground(Color.pink);
        jProgressBar1.setBackground(Color.red);
        int seg;
        while (tiempo != null) {
            try {
                for (seg = 1; seg <= texto.length; seg++) {
                    jProgressBar1.setValue(seg);
                    tiempo.sleep(Tiempo);
//                        jProgressBar1.setString("Loading "+texto[seg-1]+"...");
jProgressBar1.setString(texto[seg-1]);

                }
                
                tiempo = null;
                this.dispose();
                new Principal.Login().setVisible(true);
            } catch (InterruptedException ex) {
                Logger.getLogger(splash.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
}
